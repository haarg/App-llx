#!/usr/bin/env perl
use strict;
use warnings;

my $VERSION;
$VERSION = 'v1.0.0';

my $is_win32 = $^O eq 'MSWin32';
my $dir_join = $is_win32 ? "\\" : "/";
my $dir_sep  = $is_win32 ? "/\\" : "/";
my $path_sep = $is_win32 ? ";" : ":";
my $abs_re   = $is_win32 ? qr{\A(?:(?:\\\\|//)[^\\/]+[\\/][^\\/]+|(?:[a-zA-Z]:)?[\\/])} : qr{\A/};

my $dirname = sub {
  my $path = shift;
  $path =~ s{($abs_re)?}{}o;
  my $abs = $1;
  $path =~ s{[$dir_sep]*[^$dir_sep]+[$dir_sep]*\z}{}o;
  $path = "$abs$path"
    if defined $abs;
  return '.'
    if !length $path;
  return $path;
};

my $find_parent = sub {
  my $dir = shift;

  my $parent = join($dir_join, $dir, '..');

  my ($d_dev, $d_ino) = stat($dir);
  my ($p_dev, $p_ino) = stat($parent);
  # at root
  if ($p_dev eq $d_dev && $p_ino eq $d_ino) {
    return undef;
  }

  my $cut_dir = $dirname->($dir);
  if ($cut_dir eq $dir) {
    return undef;
  }
  my ($c_dev, $c_ino) = stat($cut_dir);
  if ($p_dev eq $c_dev && $p_ino eq $c_ino) {
    return $cut_dir;
  }

  return $parent;
};

my $cwd;
$cwd = sub () {
  if ($is_win32) {
    $cwd = defined &Win32::GetCwd ? \&Win32::GetCwd : sub () {
      my $pwd = `cd`;
      chomp $pwd;
      return $pwd;
    };
  }
  else {
    for my $try (
      '/bin/pwd',
      '/usr/bin/pwd',
    ) {
      if (-x $try) {
        $cwd = sub () {
          my $pwd = `$try`;
          chomp $pwd;
          return $pwd;
        };
        last;
      }
    }
  }
  goto &$cwd;
};

my $join_dir = sub { join $dir_join, @_ };
my $split_dir = sub { split /[$dir_sep]/o, $_[0] };

my $rel2abs = sub {
  my ($path, $rel) = @_;
  return $path
    if $path !~ $abs_re;

  if (!defined $rel) {
    $rel = $cwd->();
  }

  $path =~ s{[$dir_sep]\z}{}o;
  return $rel
    if $path eq '.' || $path eq '';

  $join_dir->($rel, $path);
};

if (!caller) {
  my $in_super_exclusive;
  my $exclusive;
  my $super_exclusive;
  my $print;
  my $add_lib;
  my @command;

  for my $i (0 .. $#ARGV) {
    my $arg = $ARGV[$i];
    if ($arg eq '--') {
      @command = @ARGV[ $i+1 .. $#ARGV ];
      last;
    }
    elsif ($arg eq '-h' || $arg eq '--help') {
      exec 'pod2usage', qw(-exit 0 -verbose 2), $0;
      exit 127;
    }
    elsif ($arg eq '-V') {
      print "llx $VERSION\n";
      exit 0;
    }
    elsif ($arg eq '-X') {
      $super_exclusive = 1;
    }
    elsif ($arg eq '-x') {
      $exclusive = 1;
    }
    elsif ($arg eq '-p') {
      $print = 1;
    }
    elsif ($arg eq '-l') {
      $add_lib = 1;
    }
    elsif ($arg =~ /\A-/) {
      die "invalid option $arg!\n";
    }
    else {
      @command = @ARGV[ $i .. $#ARGV ];
      last;
    }
  }

  if ($print) {
    die "Command not allowed with print (-p) option!\n"
      if @command;
  }
  else {
    die "No command given!\n"
      if !@command;
  }

  my $base_dir;
  my $ll = $ENV{PERL_CARTON_PATH};
  if (defined $ll) {
    $base_dir = $find_parent->($ll);
  }
  else {
    my $cpanfile = $ENV{PERL_CARTON_CPANFILE};
    if (defined $cpanfile) {
      die "PERL_CARTON_CPANFILE is set but file does not exist!\n"
        if !-e $cpanfile;
      my $dir = $rel2abs->($dirname->($cpanfile));
      $ll = $join_dir->($dir, 'local');
      $base_dir = $dir;
    }
    else {
      my $dir = my $pwd = $cwd->();
      while (1) {
        if (
          -e $join_dir->($dir, 'cpanfile') or
          -d $join_dir->($dir, 'local', 'lib', 'perl5')
        ) {
          $ll = $join_dir->($dir, 'local');
          $base_dir = $dir;
          last;
        }
        my $parent = $find_parent->($dir);
        last
          if !defined $parent;
        $dir = $parent;
      }
      die "Unable to find cpanfile or local::lib from $pwd!\n"
        if !defined $ll;
    }
  }

  if ($print) {
    print $ll . "\n";
    exit 0;
  }

  my @bins = $join_dir->($ll, 'bin');
  my @libs = $join_dir->($ll, 'lib', 'perl5');

  if ($add_lib) {
    unshift @bins, grep -d, map $join_dir->($base_dir, $_), 'bin', 'script';
    unshift @libs, $join_dir->($base_dir, 'lib');
  }

  if ($super_exclusive || $exclusive) {
    delete $ENV{PERL5LIB};
    my $lls = delete $ENV{PERL_LOCAL_LIB_ROOT};
    if (defined $lls) {
      my $ll_bin_match =
        join '|',
        map "\Q$_\E[$dir_sep]+bin",
        split /$path_sep/,
        $lls;

      $ENV{PATH} =~ s{(\G|$path_sep)(?:$ll_bin_match)($path_sep|\z)}{$1}g;
    }
  }

  my $ll_escape = $ll;
  $ll_escape =~ s{\\}{\\\\}g;
  if ($ll_escape =~ s/ /\\ /g) {
    $ll_escape = qq{"$ll_escape"};
  }

  my $add_env = sub {
    my ($var, @add) = @_;
    $ENV{$var} = join($path_sep,
      @add,
      exists $ENV{$var} ? $ENV{$var} : (),
    );
  };

  $add_env->(PERL_LOCAL_LIB_ROOT => $ll);
  $add_env->(PATH => @bins);
  $add_env->(PERL5LIB => @libs);
  $ENV{PERL_MB_OPT} = "--install_base $ll_escape";
  $ENV{PERL_MM_OPT} = "INSTALL_BASE=$ll_escape";

  if ($super_exclusive) {
    my $me = $rel2abs->($0);

    die "can't find myself ($0)!\n"
      if !-e $me;

    $ENV{PERL5OPT} = join(' ',
      qq{-M5;BEGIN{(do"\Q$me\E")->()}},
      exists $ENV{PERL5OPT} ? $ENV{PERL5OPT} : (),
    );
  }

  no warnings 'exec';
  exec { $command[0] } @command;
  warn qq{Can't exec "$command[0]": $!\n};
  exit 127;
}
# super exclusive mode, where we get loaded into every perl process
else {
  return sub {
    require Config;

    my @base_inc = do {
      local $ENV{PERL5OPT} = '';
      delete $ENV{PERL5OPT};
      my @dirs = `"$^X" -le"print for \@INC"`;
      chomp @dirs;
      @dirs;
    };

    while (@base_inc && @INC) {
      my $last = pop @base_inc;
      if ($last eq $INC[-1]) {
        pop @INC;
      }
      else {
        last;
      }
    }

    no warnings 'once';
    my (
      $archname,
      $version,
      $inc_version_list,
      $archlibexp,
      $privlibexp,
    ) = @Config::Config{qw(
      archname
      version
      inc_version_list
      archlibexp
      privlibexp
    )};

    my @sub_dirs = (
      $archname,
      $version,
      (grep length, split / /, $inc_version_list),
      "$version/$archname",
    );

    my $arch_ver_dirs = sub {
      my $lib = shift;
      return (
        $lib,
        grep -d,
        map "$lib/$_", @sub_dirs,
      );
    };

    my @perl5lib = exists $ENV{PERL5LIB} ? (grep length, split /$path_sep/, $ENV{PERL5LIB}) : ();

    push @INC, (
      (reverse map $arch_ver_dirs->($_), @perl5lib),
      $archlibexp,
      $privlibexp,
    );

    return;
  };
}

1;

__END__

=head1 NAME

llx - Execute in a local::lib

=head1 SYNOPSIS

  llx [-lhpxX] [command ...]

=head1 DESCRIPTION

Runs a program within a L<local::lib>. Equivalent to C<carton exec>, but
implemented as a single file with no dependencies.

The C<PATH> and C<PERL5LIB> environment variables will be set up to use the
local lib.

By default, the local lib used will be found by searching from the current
directory upward until it finds a F<cpanfile> or a F<local/lib/perl5>
directory. The F<local> subdirectory of that path will be used as the local
lib.

=head1 OPTIONS

=over 4

=item C<-h>

=item C<--help>

Shows this help text.

=item C<-l>

B<EXPERIMENTAL>

Also adds the C<lib> directory next to the local lib directory to C<PERL5LIB>.

=item C<-p>

Prints the local lib directory to be used rather than running a command.

=item C<-x>

Exclusive mode. If this is used, the current C<PERL5LIB> environment variable
will be cleared and only the new local lib directory will be used.

=item C<-X>

B<EXPERIMENTAL>

Super exclusive mode. If this is used, all directories aside from the core lib,
core arch lib, and the local lib will be cleared from C<@INC>. This includes the
core site libs and vendor libs. 

=back

=head1 ENVIRONMENT VARIABLES

=over 4

=item C<PERL_CARTON_PATH>

This specifies the path to the local lib. If set, it will be used rather than
searching upward.

=item C<PERL_CARTON_CPANFILE>

This specifies the path to a F<cpanfile>. If set, a F<local> directory in the
same directory as the specified F<cpanfile> will be used rather than searching.

=back
